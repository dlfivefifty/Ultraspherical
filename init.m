(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Ultraspherical`"];
BandedOperator;
ReplaceEntry;
LeftBandwidth;
RightBandwidth;
IncreaseLength;
ApplyToRows;
LowerIndex;
LeftIndex;
RightIndex;
Begin["Private`"];


BandedOperator/:BandedOperator[A_List,jsh_,fill_List,rowgen_][[i_Integer,j_Integer]]:=\[Piecewise]{
 {A[[i,j-i+jsh]], i<=Length[A]&&1<=j-i+jsh<=Dimensions[A][[2]]},
 {fill[[i]], i<=Length[fill]&&j-i+jsh>Dimensions[A][[2]]},
 {rowgen[i][[j-i+jsh]], 1<=j-i+jsh<=Dimensions[A][[2]]},
 {0, True}
};
BandedOperator/:bnd_BandedOperator[[i_List,j_Integer]]:=bnd[[#,j]]&/@i;
BandedOperator/:sp_BandedOperator[[i_Integer,jm_Integer;;jM_Integer]]:=Module[{j},
	Table[sp[[i,j]],{j,jm,jM}]];
BandedOperator/:sp_BandedOperator[[im_Integer;;iM_Integer,j_Integer]]:=Module[{i},
	Table[sp[[i,j]],{i,im,iM}]];
BandedOperator/:sp_BandedOperator[[im_Integer;;iM_Integer,jm_Integer;;jM_Integer]]:=Module[{i},
	Table[sp[[i,j]],{i,im,iM},{j,jm,jM}]];



ReplaceEntry[bnd:BandedOperator[A_List,jsh_,fil_List,rowgen_],{i_,j_},p_]:=Module[{B,nfil},
If[i>Length[A],
ReplaceEntry[bnd//IncreaseLength,{i,j},p]
,
If[j-i+jsh<=Dimensions[A][[2]],
B=A;
B[[i,j-i+jsh]]=p;
BandedOperator[B,jsh,fil,rowgen]
,
nfil=PadRight[fil,Max[Length[fil],i]];
nfil[[i]]=p;
BandedOperator[A,jsh,nfil,rowgen]
]
]
];
LeftBandwidth[BandedOperator[A_List,jsh_,___]]:=1-jsh;
RightBandwidth[BandedOperator[A_List,jsh_,___]]:=Length[A[[1]]]-jsh;
LeftIndex[bnd_BandedOperator,row_]:=Max[row+LeftBandwidth[bnd],1];
RightIndex[bnd_BandedOperator,row_]:=row+RightBandwidth[bnd];

LowerIndex[bnd_BandedMatrix,col_]:=col-LeftBandwidth[bnd];

Bandwidth[bnd_BandedOperator]:=RightBandwidth[bnd]-LeftBandwidth[bnd]+1;
SetRightBandwidth[BandedOperator[A_List,jsh_,fil_List,rowgen_],m_]:=BandedOperator[PadRight[#[[1]],m+jsh,#[[2]]]&/@Thread[{A,PadRight[fil,Length[A]]}],jsh,fil,PadRight[rowgen[#],m+jsh]&];

BandedOperator/:Length[BandedOperator[A_List,___]]:=Length[A];
BandedOperator/:Dimensions[BandedOperator[A_List,jsh_,___]]:={Length[A],Length[A[[-1]]]+Length[A]-jsh};

ToArray[bnd_BandedOperator]:=bnd[[;;Length[bnd],;;Dimensions[bnd][[2]]]];
BandedOperator/:MatrixForm[bnd_BandedOperator]:=bnd//ToArray//MatrixForm;


IncreaseLength[BandedOperator[A_List,jsh_,fill_List,rowgen_]]:=BandedOperator[Join[A,{rowgen[Length[A]+1]}],jsh,fill,rowgen];

ApplyToRows[G_,Bn_BandedOperator,{row1_,row2_}]:=Module[{vals,Bn1},
Bn1=Bn;

Do[
vals=G.Bn1[[{row1,row2},i]];
Bn1=ReplaceEntry[Bn1,{row1,i},vals[[1]]];
Bn1=ReplaceEntry[Bn1,{row2,i},vals[[2]]];

,{i,LeftIndex[Bn1,row2],RightIndex[Bn1,row1]}];


vals=G.Bn1[[{row1,row2},RightIndex[Bn1,row1]+1]];
Do[
Bn1=ReplaceEntry[Bn1,{row1,i},vals[[1]]];
Bn1=ReplaceEntry[Bn1,{row2,i},vals[[2]]];
,{i,RightIndex[Bn1,row1]+1,RightIndex[Bn1,row2]+1}];

Bn1
];



BandedOperator/:c_?ConstantQ BandedOperator[A_List,jsh_,fill_List,rowgen_]:=BandedOperator[c A,jsh,c fill, c rowgen[#]&]


End[];
EndPackage[];
