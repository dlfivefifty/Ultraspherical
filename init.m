(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Ultraspherical`","RiemannHilbert`Common`"];
BandedOperator;
ReplaceEntry;
LeftBandwidth;
RightBandwidth;
IncreaseLength;
ApplyToRows;
LowerIndex;
LeftIndex;
RightIndex;
IncreaseSize;
GetFill;
SetFill;
GetRowGenerator;
GetFillValue;
Filler;
Givens;
GivensReduce;
DerivativeOperator;
ConversionOperator;
DirichletOperator;
IdentityOperator;
ZeroOperator;
LaplaceOperator;
Begin["Private`"];


GetFill[BandedOperator[A_List,jsh_,fill_List,rowgen_,___],i_]:=If[i>Length[fill],0 First[fill],fill[[i]]];
GetFillValue[BandedOperator[A_List,jsh_,fill_List,rowgen_],{i_,_}]:=fill[[i]];
GetFillValue[BandedOperator[A_List,jsh_,fill_List,rowgen_,Filler->fls_],{i_,j_}]:=fill[[i]].fls[j];
SetFill[BandedOperator[A_List,jsh_,fill_List,rowgen_,opts___],i_,val_]:=BandedOperator[A,jsh,ReplacePart[fill,i->val],rowgen,opts];
GetRowGenerator[BandedOperator[A_List,jsh_,fill_List,rowgen_,___]]:=rowgen;

BandedOperator/:bnd_BandedOperator[[i_Integer,j_Integer]]:=\[Piecewise]{
 {First[bnd][[i,j-LeftIndex[bnd,i]+1]], i<=Length[bnd]&&LeftIndex[bnd,i]<=j<=RightIndex[bnd,i]},
 {GetFillValue[bnd,{i,j}], i<=Length[bnd]&&j>RightIndex[bnd,i]},
 {GetRowGenerator[bnd][i][[j-LeftIndex[bnd,i]+1]], LeftIndex[bnd,i]<=j<=RightIndex[bnd,i]},
 {0, True}
};
BandedOperator/:bnd_BandedOperator[[i_List,j_Integer]]:=bnd[[#,j]]&/@i;
BandedOperator/:sp_BandedOperator[[i_Integer,jm_Integer;;jM_Integer]]:=Module[{j},
	Table[sp[[i,j]],{j,jm,jM}]];
BandedOperator/:sp_BandedOperator[[im_Integer;;iM_Integer,j_Integer]]:=Module[{i},
	Table[sp[[i,j]],{i,im,iM}]];
BandedOperator/:sp_BandedOperator[[im_Integer;;iM_Integer,jm_Integer;;jM_Integer]]:=Module[{i},
	Table[sp[[i,j]],{i,im,iM},{j,jm,jM}]];


LeftBandwidth[BandedOperator[A_List,jsh_,___]]:=1-jsh;
RightBandwidth[BandedOperator[A_List,jsh_,___]]:=Length[A[[1]]]-jsh;
LeftIndex[bnd_BandedOperator,row_]:=Max[row+LeftBandwidth[bnd],1];
RightIndex[bnd_BandedOperator,row_]:=LeftIndex[bnd,row]+\[Piecewise]{
 {Length[First[bnd][[row]]], row<=Length[bnd]},
 {Length[GetRowGenerator[bnd][row]], True}
}-1;

LowerIndex[bnd_BandedMatrix,col_]:=col-LeftBandwidth[bnd];

Bandwidth[bnd_BandedOperator]:=RightBandwidth[bnd]-LeftBandwidth[bnd]+1;

BandedOperator/:Length[BandedOperator[A_List,___]]:=Length[A];
BandedOperator/:Dimensions[BandedOperator[A_List,jsh_,___]]:={Length[A],Length[A[[-1]]]+Length[A]-jsh};

ToArray[bnd_BandedOperator]:=bnd[[;;Length[bnd],;;Dimensions[bnd][[2]]]];
BandedOperator/:MatrixForm[bnd_BandedOperator]:=
If[GetRowGenerator[bnd]===Null,
MatrixMap[MatrixForm,bnd[[;;Length[bnd],;;RightIndex[bnd,Length[bnd]]+3]]]//MatrixForm,
MatrixMap[MatrixForm,bnd[[;;Length[bnd]+3,;;RightIndex[bnd,Length[bnd]]+3]]]//MatrixForm];


IncreaseLength[BandedOperator[A_List,jsh_,fill_List,rowgen_,opts___]]:=BandedOperator[Join[A,{rowgen[Length[A]+1]}],jsh,Append[fill,0 Last[fill]],rowgen,opts];


(** Set Length to be at least n **)
IncreaseLength[bnd_BandedOperator,n_]:=If[Length[bnd]>=n,bnd,IncreaseLength[bnd//IncreaseLength,n]];



(** Set Row Length at i to be at least j **)

IncreaseRightIndex[bnd:BandedOperator[A_List,jsh_,fil_List,rowgen_,opts___],i_,j_]:=Module[{B},
If[j<=RightIndex[bnd,i],
bnd
,
B=A;
B[[i]]=Append[B[[i]],bnd[[i,RightIndex[bnd,i]+1]]];
IncreaseRightIndex[BandedOperator[B,jsh,fil,rowgen,opts],i,j]
]
];

IncreaseRowLength[bnd:BandedOperator[A_List,jsh_,fil_List,rowgen_,opts___],i_,j_]:=Module[{B},
If[j<=Length[A[[i]]],
bnd
,
B=A;
B[[i]]=Append[B[[i]],bnd[[i,RightIndex[bnd,i]+1]]];
IncreaseRowLength[BandedOperator[B,jsh,fil,rowgen,opts],i,j]
]
];

IncreaseDimension[bnd_BandedOperator,{m_,n_}]:=Module[{i,Bn},
Bn=IncreaseLength[bnd,m];
Do[
Bn=IncreaseRowLength[Bn,i,n];,
{i,m}];
Bn];



ReplaceEntry[bnd:BandedOperator[A_List,jsh_,fil_List,rowgen_,fls:OptionsPattern[]],{i_,j_},p_,opts:OptionsPattern[IncreaseSize->False]]:=Module[{B,nfil},

If[j<LeftIndex[bnd,i],
Throw["left of left entry"]];

If[i>Length[A],
If[!OptionValue[IncreaseSize],
Throw["Replacing entry past size"]];
ReplaceEntry[bnd//IncreaseLength,{i,j},p,opts]
,
If[j<=RightIndex[bnd,i],
B=A;
B[[i,j-LeftIndex[bnd,i]+1]]=p;
BandedOperator[B,jsh,fil,rowgen,fls]
,
If[!OptionValue[IncreaseSize],
Throw["Replacing entry past size"]];

ReplaceEntry[IncreaseRightIndex[bnd,i,j],{i,j},p,opts]
]
]
];

ApplyToRows[G_,Bn_BandedOperator,{row1_,row2_}]:=Module[{vals,Bn1},
Bn1=Bn;

Do[
vals=G.Bn1[[{row1,row2},i]];
Bn1=ReplaceEntry[Bn1,{row1,i},vals[[1]],IncreaseSize->True];
Bn1=ReplaceEntry[Bn1,{row2,i},vals[[2]],IncreaseSize->True];

,{i,LeftIndex[Bn1,row2],RightIndex[Bn1,row2]}];


vals=G.{GetFill[Bn1,row1],GetFill[Bn1,row2]};

Bn1=SetFill[Bn1,row1,vals[[1]]];
Bn1=SetFill[Bn1,row2,vals[[2]]];

Bn1
];



BandedOperator/:c_?NumberQ BandedOperator[A_List,jsh_,fill_List,rowgen_,opts:OptionsPattern[]]:=BandedOperator[c A,jsh,c fill, c rowgen[#]&,opts];
BandedOperator/:c_?NumberQ BandedOperator[A_List,jsh_,fill_List,Null,opts:OptionsPattern[]]:=BandedOperator[c A,jsh,c fill, Null,opts];
BandedOperator/: (bndA:BandedOperator[A_List,jsh_,fill1_List,Null,opts:OptionsPattern[]])+(bndB:BandedOperator[B_List,jsh_,fill2_List,Null,opts:OptionsPattern[]]):=Module[{bnA,bnB},

bnA=IncreaseDimension[bndA,B//Dimensions];
bnB=IncreaseDimension[bndB,A//Dimensions];

BandedOperator[First[bnA]+First[bnB],jsh,bnA[[3]]+bnB[[3]],  Null,opts]

];

BandedOperator/:( bndA:BandedOperator[A_List,jsh_,fill1_List,rowgen1_?(!(#===Null)&),opts:OptionsPattern[]])+(bndB:BandedOperator[B_List,jsh_,fill2_List,rowgen2_,opts:OptionsPattern[]]):=Module[{bnA,bnB,rowlength},
bnA=IncreaseDimension[bndA,B//Dimensions];
bnB=IncreaseDimension[bndB,A//Dimensions];

rowlength=First[bnA][[-1]]//Length;

BandedOperator[First[bnA]+First[bnB],jsh,bnA[[3]]+bnB[[3]],  PadRight[rowgen1[#],rowlength]+PadRight[rowgen2[#],rowlength]&,opts]
];


RowZeroQ[0,_]:=True;
RowZeroQ[bnd_BandedOperator,row_]:=If[row<=Length[bnd],
	{First[bnd][[row]],GetFill[bnd,row]},
{GetRowGenerator[bnd][row]}]//Flatten//Abs//Total//NZeroQ;


ApplyToRows[G_,Bn_BandedOperator,Bnn_BandedOperator,{row1_,row2_}]:=Module[{vals,Bn1,Bn2,i},
Bn1=Bn;
Bn2=Bnn;

Do[
If[!(NZeroQ[Bn1[[row1,i]]]&&NZeroQ[Bn2[[row2,i]]]),
vals=G.{Bn1[[row1,i]],Bn2[[row2,i]]};



If[vals[[1]]!=Bn1[[row1,i]],
Bn1=ReplaceEntry[Bn1,{row1,i},vals[[1]],IncreaseSize->True];
];
If[vals[[2]]!=Bn2[[row2,i]],
Bn2=ReplaceEntry[Bn2,{row2,i},vals[[2]],IncreaseSize->True];
];
];

,{i,Min[LeftIndex[Bn1,row1],LeftIndex[Bn2,row2]],Max[RightIndex[Bn1,row1],RightIndex[Bn2,row2]]}];


vals=G.{GetFill[Bn1,row1],GetFill[Bn2,row2]};
Bn1=SetFill[Bn1,row1,vals[[1]]];
Bn2=SetFill[Bn2,row2,vals[[2]]];

{Bn1,Bn2}
];

(*This is for operator of operators *)

ApplyToRows[G_,BDx_BandedOperator,{row1_,row2_},{srow1_,srow2_}]:=Module[{vals,Bn1,B1,B2,i},
Bn1=BDx;

Do[
{B1,B2}=Bn1[[{row1,row2},i]];
{B1,B2}=ApplyToRows[G,B1,B2,{srow1,srow2}];
Bn1=ReplaceEntry[Bn1,{row1,i},B1,IncreaseSize->True];
Bn1=ReplaceEntry[Bn1,{row2,i},B2,IncreaseSize->True];

,{i,Min[LeftIndex[Bn1,row1],LeftIndex[Bn1,row2]],Max[RightIndex[Bn1,row1],RightIndex[Bn1,row2]]}];


{B1,B2}={GetFill[Bn1,row1],GetFill[Bn1,row2]};
{B1,B2}=ApplyToRows[G,#[[1]],#[[2]],{srow1,srow2}]&/@Thread[{B1,B2}]//Thread;

Bn1=SetFill[Bn1,row1,B1];
Bn1=SetFill[Bn1,row2,B2];

Bn1
];




ApplyToRows[G_,BDx_BandedOperator,Bd2_BandedOperator,{row1_,row2_},{srow1_,srow2_}]:=Module[{vals,Bn1,B1,B2,Bn2,i},
Bn1=BDx;
Bn2=Bd2;

Do[
{B1,B2}={Bn1[[row1,i]],Bn2[[row2,i]]};
If[!(RowZeroQ[B1,srow1]&&RowZeroQ[B2,srow2]),
{B1,B2}=ApplyToRows[G,B1,B2,{srow1,srow2}];
Bn1=ReplaceEntry[Bn1,{row1,i},B1,IncreaseSize->True];
Bn2=ReplaceEntry[Bn2,{row2,i},B2,IncreaseSize->True];
];

,{i,Min[LeftIndex[Bn1,row1],LeftIndex[Bn2,row2]],Max[RightIndex[Bn1,row1],RightIndex[Bn2,row2]]}];

{B1,B2}={GetFill[Bn1,row1],GetFill[Bn2,row2]};
{B1,B2}=ApplyToRows[G,#[[1]],#[[2]],{srow1,srow2}]&/@Thread[{B1,B2}]//Thread;

Bn1=SetFill[Bn1,row1,B1];
Bn2=SetFill[Bn2,row2,B2];

{Bn1,Bn2}
];

(*This is for list operators of operators *)

ApplyToRows[G_,BL:{__BandedOperator},{row1_,row2_},{srow1_,srow2_},{ssrow1_,ssrow2_}]:=Module[{vals,Bn1,B1,B2},
Bn1=BL;


{B1,B2}=Bn1[[{row1,row2}]];
{B1,B2}=ApplyToRows[G,B1,B2,{srow1,srow2},{ssrow1,ssrow2}];
Bn1[[row1]]=B1;
Bn1[[row2]]=B2;

Bn1
];



Givens[Bin_,Binn_,{i_,j_},k_]:=Module[{A,a,bB},
a=Bin[[i,k]];
bB=Binn[[j,k]];
({
 {a, bB},
 {-bB, a}
})/Norm[{a,bB}]
];
Givens[Bn_,{row1_,row2_},{srow1_,srow2_},{ssrow1_,ssrow2_},col_,scol_]:=
Givens[Bn[[row1]][[srow1,col]],Bn[[row2]][[srow2,col]],{ssrow1,ssrow2},scol]//N;


GivensReduce[BDx_,{row1_,row2_}]:=Module[{G},
G=Givens[BDx,BDx,{row1,row2},row1]//N;
ApplyToRows[G,BDx,{row1,row2}]
];
GivensReduce[BDx_,{row1_,row2_},{srow1_,srow2_}]:=Module[{G},
G=Givens[BDx[[row1,row1]],BDx[[row2,row1]],{srow1,srow2},srow1]//N;
ApplyToRows[G,BDx,{row1,row2},{srow1,srow2}]
];
GivensReduce[BDx_,{row1_,row2_},{srow1_,srow2_},{ssrow1_,ssrow2_}]:=Module[{G},
G=Givens[BDx[[row1]][[srow1,srow1]],BDx[[row2]][[srow2,srow1]],{ssrow1,ssrow2},ssrow1]//N;
ApplyToRows[G,BDx,{row1,row2},{srow1,srow2},{ssrow1,ssrow2}]
];


GivensReduce[BDx_,{row1_,row2_},col_]:=Module[{G},
G=Givens[BDx,BDx,{row1,row2},col]//N;
ApplyToRows[G,BDx,{row1,row2}]
];
GivensReduce[BDx_,{row1_,row2_},{srow1_,srow2_},col_,scol_]:=Module[{G},
G=Givens[BDx[[row1,col]],BDx[[row2,col]],{srow1,srow2},scol]//N;
ApplyToRows[G,BDx,{row1,row2},{srow1,srow2}]
];
GivensReduce[BDx_,{row1_,row2_},{srow1_,srow2_},{ssrow1_,ssrow2_},col_,scol_]:=ApplyToRows[Givens[BDx,{row1,row2},{srow1,srow2},{ssrow1,ssrow2},col,scol],BDx,{row1,row2},{srow1,srow2},{ssrow1,ssrow2}];


DerivativeOperator[2,Filler->fls_]:=BandedOperator[{{0,0,4}},1,{0 fls[1]},{0,0,2 (#+1)}&,Filler->fls];
DerivativeOperator[1,Filler->fls_]:=BandedOperator[{{1}},0,{0 fls[1]},{#}&,Filler->fls];
DerivativeOperator[1]:=DerivativeOperator[1,Filler->({(-1)^(#-1),1}&)];
DerivativeOperator[2]:=DerivativeOperator[2,Filler->({(-1)^(#-1),1}&)];

ConversionOperator[1,Filler->fls_]:=BandedOperator[{{1,0,-1/2}},1,{0 fls[1]},{1/2,0,-1/2}&,Filler->fls];
ConversionOperator[1]:=ConversionOperator[1,Filler->({(-1)^(#-1),1}&)];
ConversionOperator[2,Filler->fls_]:=BandedOperator[{{1,0,-2/3,0,1/6}},1,{0 fls[1]},{1/(2 #),0,-(1/(2 (#+2)))-1/(2 #),0,1/(2(#+2))}&,Filler->fls];
ConversionOperator[2]:=ConversionOperator[2,Filler->({(-1)^(#-1),1}&)];

DirichletOperator[-1]:=BandedOperator[{{1}},1,{{1,0}},Null,Filler->({(-1)^(#-1),1}&)];
DirichletOperator[1]:=BandedOperator[{{1}},1,{{0,1}},Null,Filler->({(-1)^(#-1),1}&)];


IdentityOperator[Filler->fls_]:=BandedOperator[{{1,0,0}},1,{0 fls[1]},{1,0,0}&,Filler->fls];
IdentityOperator[]:=IdentityOperator[Filler->({(-1)^(#-1),1}&)];

ZeroOperator[Filler->fls_]:=BandedOperator[{{0,0,0}},1,{0 fls[1]},{0,0,0}&,Filler->fls];
ZeroOperator[]:=ZeroOperator[Filler->({(-1)^(#-1),1}&)];

ZeroOperator[1,\[Infinity],Filler->fls_]:=BandedOperator[{{0}},1,{0 fls[1]},Null,Filler->fls];
ZeroOperator[1,\[Infinity]]:=ZeroOperator[1,\[Infinity],Filler->({(-1)^(#-1),1}&)];






DirichletOperator[-1,All]:=BandedOperator[{{IdentityOperator[]}},1,{{IdentityOperator[],ZeroOperator[]}},Null,Filler->({(-1)^(#-1),1}&)];
DirichletOperator[1,All]:=BandedOperator[{{IdentityOperator[]}},1,{{ZeroOperator[],IdentityOperator[]}},Null,Filler->({(-1)^(#-1),1}&)];
DirichletOperator[All,-1]:=BandedOperator[{{DirichletOperator[-1]}},1,{{ZeroOperator[1,\[Infinity]],ZeroOperator[1,\[Infinity]]}},{DirichletOperator[-1]}&,Filler->({(-1)^(#-1),1}&)];
DirichletOperator[All,1]:=BandedOperator[{{DirichletOperator[1]}},1,{{ZeroOperator[1,\[Infinity]],ZeroOperator[1,\[Infinity]]}},{DirichletOperator[1]}&,Filler->({(-1)^(#-1),1}&)];


DerivativeOperator[0,1]:=BandedOperator[{{ConversionOperator[1]}},0,{ZeroOperator[]},{(#)ConversionOperator[1]}&];
DerivativeOperator[1,0]:=BandedOperator[{{DerivativeOperator[1],ZeroOperator[],-DerivativeOperator[1]/2}},1,{ZeroOperator[]},{DerivativeOperator[1]/2,ZeroOperator[],-DerivativeOperator[1]/2}&];


DerivativeOperator[0,2]:=BandedOperator[{{4 ConversionOperator[2]}},-1,{ZeroOperator[]},{2(#+1)ConversionOperator[2]}&];
DerivativeOperator[2,0]:=BandedOperator[{{DerivativeOperator[2],ZeroOperator[],-2/3 DerivativeOperator[2],ZeroOperator[],DerivativeOperator[2]/6}},1,{ZeroOperator[]},{DerivativeOperator[2]/(2 #),ZeroOperator[],(-(1/(2 (#+2)))-1/(2 #))DerivativeOperator[2],ZeroOperator[],DerivativeOperator[2]/(2(#+2))}&];


LaplaceOperator:=BandedOperator[{{DerivativeOperator[2],ZeroOperator[],BandedOperator[{(-2/3) {0,0,4,0,0}+4 {1,0,-2/3,0,1/6}},1,{{0,0}},(-2/3){0,0,2 (#+1),0,0}+4{1/(2 #),0,-(1/(2 (#+2)))-1/(2 #),0,1/(2(#+2))}&,Filler->({(-1)^(#-1),1}&)],ZeroOperator[],DerivativeOperator[2]/6}},1,{ZeroOperator[]},{DerivativeOperator[2]/(2 #),ZeroOperator[],BandedOperator[{(-(1/(2 (#+2)))-1/(2 #)) {0,0,4,0,0}+2(#+1){1,0,-2/3,0,1/6}},1,{0},Function[rw,(-(1/(2 (#+2)))-1/(2 #)){0,0,2 (rw+1),0,0}+2(#+1){1/(2rw),0,-(1/(2 (rw+2)))-1/(2 rw),0,1/(2(rw+2))}]],ZeroOperator[],DerivativeOperator[2]/(2(#+2))}&];


End[];
EndPackage[];
